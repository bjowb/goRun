// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  //autheticate
  id                String   @id @default(uuid())
  clerkUserId       String   @unique
  name              String
  email             String   @unique
  imageUrl          String

  //profile fields
  age                Int?
  weight            Float?
  height            Float?
  gender            String?
  activityLevel     String?
  dietaryPreference String?

  //Time save
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  //Functions 
  foodLogs          FoodLog[]
  mealSuggestions   MealSuggestion[]
  progressRecords   ProgressRecord[]
}

model FoodItem {
  id        String   @id @default(uuid())
  name      String
  calories  Int
  protein   Float
  carbs     Float
  fat       Float
  category  String?   // breakfast, lunch, snack, etc.
  isCustom  Boolean   @default(false)

  foodLogs  FoodLog[]
}

model FoodLog {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem  @relation(fields: [foodItemId], references: [id])
  foodItemId String
  quantity   Float
  mealType   String    // breakfast, lunch, dinner
  timestamp  DateTime  @default(now())
}

model MealSuggestion {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  suggestion    String
  meals         Json      // structured JSON object of food items
  calories      Int
  createdAt     DateTime  @default(now())
  aiModelUsed   String?
}

model ProgressRecord {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  weight      Float
  bodyFatPct  Float?
  loggedAt    DateTime @default(now())
}